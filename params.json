{
  "name": "Javascript Singleton Pattern",
  "tagline": "This blog explain JavaScript Singleton Design Pattern",
  "body": "# JavaScript Singleton Pattern\r\n\r\nThis blog explain JavaScript **Singleton** Design Pattern\r\n\r\nMany a times, we face a requirement where we need only one object of a class to communicate across the application. **Singleton** Pattern comes into role in this scenario. \r\n**Singleton** is one of my favorite Design Patterns. **Singleton** pattern restricts us to initialize more than one object. We implement **Singleton** by creating a class, having \r\na method named as getInstance(), which returns reference to object of that class. If object has already been initiated, then it will return reference to that object, \r\notherwise will initiate a new instance and return reference to that newly initiated object. In JavaScript, we can easily implement **Singleton** Pattern.\r\n```JavaScript\r\n/*\r\n * ApplicationContext is Singleton class.\r\n */\r\nvar ApplicationContext = (function () {\r\n    var instance; // instance variable to hold the reference of Object.\r\n    function initialize() {\r\n        // private members here\r\n        var _this = this;\r\n        var secretKey = +new Date() + \"\" + parseInt(Math.random()*1000, 10);\r\n        return {\r\n            // public members.\r\n            getSecretKey: function () {\r\n                return port;\r\n            }\r\n        };\r\n    }\r\n    return {\r\n        /* \r\n         * If instance variable is already having reference to the ApplicationContext, then return it, \r\n         * Otherwise initialize the instance variable first and then return.\r\n         */\r\n        getInstance: function () {\r\n            if (!instance) {\r\n                instance = initialize();\r\n            }\r\n            return instance;\r\n        }\r\n    };\r\n})();\r\nvar app1 = ApplicationContext.getInstance();\r\nvar app2 = ApplicationContext.getInstance();\r\nconsole.log(app1.getSecretKey() == app2.getSecretKey()); // true\r\n```\r\n\r\napp1 and app2 both are having same object, so app1.getSecretKey() == app2.getSecretKey() is logging true.\r\n\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/AmitThakkar)\r\n\r\n[Twitter](https://twitter.com/amit_thakkar01)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/amitthakkar01)\r\n\r\n[More Blogs By Me](https://amitthakkar.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}